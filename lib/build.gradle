plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.wiremock:wiremock:3.12.1'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'ch.qos.logback:logback-classic:1.5.18'

    compileOnly 'io.grpc:grpc-stub:1.72.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'io.github.lothar1998'
            artifactId = 'kuberesolver-java'
            version = System.getenv("RELEASE_VERSION") ?: "0.0.1-SNAPSHOT"

            from components.java

            pom {
                name = 'Kuberesolver'
                description = 'gRPC name resolver for Kubernetes'
                url = 'https://github.com/lothar1998/kuberesolver-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'lothar1998'
                        name = 'Piotr Kuglin'
                        email = 'lothar1998.dev@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/lothar1998/kuberesolver-java.git'
                    developerConnection = 'scm:git:ssh://git@github.com:lothar1998/kuberesolver-java.git'
                    url = 'https://github.com/lothar1998/kuberesolver-java'
                }
            }
        }
    }

    repositories {
        maven {
            name = "CentralPortal"
            url = uri("https://central.sonatype.com/api/v1/publisher/upload")
            credentials {
                username = project.findProperty("central.user") ?: System.getenv("CENTRAL_USERNAME")
                password = project.findProperty("central.key") ?: System.getenv("CENTRAL_TOKEN")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/lothar1998/kuberesolver-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    sign publishing.publications.maven
    def privateKey = System.getenv("SIGNING_KEY_FILE")
    def signingPassword = System.getenv("SIGNING_PASSWORD")

    if (privateKeyBase64 != null && signingPassword != null) {
        useInMemoryPgpKeys(privateKey, signingPassword)
    } else {
        println "Warning: GPG signing environment variables not found. Skipping signing."
    }
}